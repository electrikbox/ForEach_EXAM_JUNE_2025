services:
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-bar_cocktail_db}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cocktail-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: springboot_backend
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/bar_cocktail_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    entrypoint: ["/bin/sh", "-c", "sleep 15 && java -jar /app/app.jar"] # Attendre 15 secondes
    networks:
      - cocktail-network

  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: springboot_backend_dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - cocktail-network

  frontend:
    build:
      context: ./front-bar
      dockerfile: Dockerfile
    container_name: vue_frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://backend:8080
    networks:
      - cocktail-network

  frontend-dev:
    build:
      context: ./front-bar
      dockerfile: Dockerfile.dev
    container_name: vue_frontend_dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ./front-bar:/app
      - /app/node_modules
    depends_on:
      - backend-dev
    environment:
      - VITE_API_URL=http://backend:8080
    networks:
      - cocktail-network

networks:
  cocktail-network:
    driver: bridge

volumes:
  postgres_data: